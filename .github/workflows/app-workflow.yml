# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ develop ]
    # paths:
    #   - 'service/**'
    #   - '.github/workflows/app-workflow.yaml'
  push:
    branches: [ develop ]
    # paths:
    #   - 'service/**'
    #   - '.github/workflows/app-workflow.yaml'

permissions:
  contents: read

jobs:
  project-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Execute Gradle build
      working-directory: ./service/cms-service
      run: ./gradlew build -x test
    - uses: actions/upload-artifact@master
      with:
        name: xbase-cms-artifact
        path: ./service/cms-service/build/libs
      
  docker-build:
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@master
        with:
          name: xbase-cms-artifact
          path: ./service/cms-service/build/libs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into the Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Build, Tag, and push the Docker image - latest"
        working-directory: ./service/cms-service
        env:
          IMAGE_NAME: "vunt/xbase_cms_backend"
          IMAGE_TAG: latest
        run: |
          docker build -t $IMAGE_NAME:${GITHUB_SHA::10} -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG    
          docker push $IMAGE_NAME:${GITHUB_SHA::10}

  deploy:
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - uses: actions/checkout@v3
      - name: Deploy the application
        run: |
          set +e
          which ssh-agent || ( apk add openssh-client )
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
          ssh-keyscan -p $SSH_PORT_REMOTE -H $CI_ENVIRONMENT_URL >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo " * OPENING DOCKER SOCKET TUNNEL"
          ssh -p${{ secrets.SERVER_PORT }} -4 -fTN -L localhost:8666:/var/run/docker.sock ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}
          export DOCKER_HOST=localhost:8666
          cd ./service/cms-service/ci/dev
          docker-compose -f deploy.yml up -d
