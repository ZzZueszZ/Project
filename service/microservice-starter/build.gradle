import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}
def tag = property("CI_TAG") ? "${property("CI_TAG")}-${property("CI_COMMIT_SHORT_SHA")}-RELEASE" : null
def buildVersion = property("CI_CURRENT_BRANCH") ? "${property("CI_CURRENT_BRANCH")}-${property("CI_COMMIT_SHORT_SHA")}-SNAPSHOT" : "local-${new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date())}-SNAPSHOT"

group = 'dev.xbase'
version = tag ? tag : buildVersion
print "Working version: " + version
repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    set('springCloudVersion', "2022.0.4")
    set('springdocVersion', "2.2.0")
    set('grpcVersion', "1.57.2")
    set('grpcJavaUntilVersion', "3.24.2")
    set('telegramLogbackVersion', "1.3.0")
    set('logbackEncoderVersion', "7.4")
    set('grpcClientVersion', "2.14.0.RELEASE")
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
dependencies {
//    api "dev.xbase:platform-protos:${property("PLATFORM_PROTO_VERSION")}"
    api 'org.springframework.security:spring-security-test'
    api "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    api "io.grpc:grpc-protobuf:${grpcVersion}"
    api "io.grpc:grpc-stub:${grpcVersion}"
    api "io.grpc:grpc-netty:${grpcVersion}"
    api "com.google.protobuf:protobuf-java-util:${grpcJavaUntilVersion}"
    api "com.github.paolodenti:telegram-logback:${telegramLogbackVersion}"
    api "net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}"
    api "net.devh:grpc-client-spring-boot-starter:${grpcClientVersion}"

    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.springframework.boot:spring-boot-starter-actuator'
    api 'org.springframework.boot:spring-boot-starter-security'
    api 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-web'
//    api 'org.springframework.boot:spring-boot-starter-data-redis'
    api 'org.springframework.boot:spring-boot-starter-cache'
    api 'org.springframework.boot:spring-boot-starter-mail'
    api 'org.springframework.boot:spring-boot-starter-test'

//    api 'org.springframework.integration:spring-integration-mqtt'
//    api 'org.springframework.integration:spring-integration-stream'

//    api 'org.springframework.boot:spring-boot-starter-integration'
//    api 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    api 'org.springframework.cloud:spring-cloud-starter-openfeign'

    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnlyApi 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter'
}
jar {
    enabled=true
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = "dev.xbase"
            artifactId = "microservice-starter"
            version = version
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}